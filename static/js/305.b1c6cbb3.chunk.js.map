{"version":3,"file":"static/js/305.b1c6cbb3.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.data.loading;\n\nexport const selectFilter = state => state.data.filter;\n\nexport const selectAllContacts = state => state.data.items;\n\nexport const filterContacts = state => state.filter.filter;\n","import styled from '@emotion/styled';\n\nexport const UlOfContact = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  gap: 15px;\n\n  @media screen and (min-width: 0px) and (max-width: 412px) {\n    justify-content: center;\n  }\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n  width: calc((100% - 30px) / 2);\n  \n  border-radius: 4px;\n  padding: 2px;\n  \n  \n  @media screen and (min-width: 0px) and (max-width: 412px) {\n    width: 90%;\n  }\n  background-image: linear-gradient(to right, #8e2de2, #4a00e0);\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n}\n`;\n\nexport const Button = styled.button`\n  display: block;\n  min-width: 75px;\n  height: 40px;\n  border: 0 solid transparent;\n  border-radius: 4px;\n  color: #ffff;\n  background-color: #ff000061;\n  opacity: 1;\n  transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:hover {\n    background-color: #f71818;\n  }\n`;\n\nexport const MainText = styled.h1`\n  text-align: center;\n`;\n\nexport const SecondaryText = styled.h2`\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Name = styled.p`\ncolor:white;\n&:first-letter {\n  text-transform: uppercase;\n}\n}`;\n\nexport const Text = styled.p`\ncolor:white;\n}`;\n","import {\n  UlOfContact,\n  ContactItem,\n  Button,\n  Name,\n  Text,\n} from './ContactsList.styled';\n\nimport { selectAllContacts } from 'redux/contacts/contacts-selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/contacts-operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const arrayContacts = useSelector(selectAllContacts);\n\n  const filterValue = useSelector(state => state.filter.filterValue);\n\n  const filterNormilized = filterValue.toLowerCase().trim();\n  const visibleContacts = arrayContacts.filter(contact =>\n    contact.name?.toLowerCase().includes(filterNormilized)\n  );\n\n  return (\n    <UlOfContact>\n      {visibleContacts.map(({ id, number, name }) => (\n        <ContactItem key={id}>\n          <div>\n            <Name>{name}</Name>\n            <Text>{number}</Text>\n          </div>\n\n          <Button onClick={() => dispatch(deleteContacts(id))} type=\"button\">\n            Delete\n          </Button>\n        </ContactItem>\n      ))}\n    </UlOfContact>\n  );\n};\n\nexport default ContactList;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    width: 320px;\n    margin: 0 auto 15px;\n    padding: 15px;\n    border: 1px solid #d4d4d4;\n    border-radius: 4px;\n\n    @media screen and (min-width: 0px) and (max-width: 412px) {\n    width: calc(100% / 1.1);\n    margin-bottom: 40px;\n  }\n}`;\n\nexport const Title = styled.h1`\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto;\n    margin: 10px 0;\n    font-size: 1.5rem;\n    color: #2196f3;\n}`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 15px;\n}`;\n\nexport const Button = styled.button`\n    margin: 0 auto;\n    display: block;\n\n    min-width: 150px;\n    height: 40px;\n    border: 0 solid transparent;\n    border-radius: 4px;\n    color: #fff;\n    background-color: #2196f3;\n    box-shadow: 0 4px 4px rgba(0,0,0,.15);\n    opacity: 1;\n    transition: background-color .25s cubic-bezier(.4,0,.2,1);\n    cursor: pointer;\n    \n    &:hover {\n     background-color: #68bcff;\n    }\n}`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Form, Button, Label } from './ContactForm.styled';\nimport { PushNotify, PushNotifyError } from '../Notify/Notify';\nimport { selectAllContacts } from 'redux/contacts/contacts-selectors';\nimport { addContacts } from 'redux/contacts/contacts-operations';\nimport { TextField } from '@mui/material';\n\nfunction ContactForm() {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n\n    const newContact = {\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value,\n    };\n\n    const checkName = contacts.some(elContact =>\n      elContact.name?.toLowerCase().includes(newContact.name.toLowerCase())\n    );\n\n    if (!checkName) {\n      dispatch(addContacts(newContact));\n      PushNotify(newContact.name);\n    } else {\n      PushNotifyError(newContact.name);\n    }\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={formSubmitHandler}>\n      <Label htmlFor={nameInputId}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n\n      <Label htmlFor={numberInputId}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Phone\"\n          variant=\"outlined\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\">Add contacts</Button>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n  margin: 0 auto 15px;\n\n  @media screen and (min-width: 0px) and (max-width: 412px) {\n    width: 100%;\n  }\n`;\n","import { Label } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterQuery } from '../../redux/contacts/contacts-slice';\nimport { TextField } from '@mui/material';\n\nconst Filter = () => {\n  const value = useSelector(state => state.filter.filter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(filterQuery(e.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <Label>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Find contacts by name\"\n          variant=\"outlined\"\n          type=\"text\"\n          value={value}\n          onChange={changeFilter}\n        />\n      </Label>\n    </div>\n  );\n};\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { selectLoading } from 'redux/contacts/contacts-selectors';\nimport {\n  MainText,\n  SecondaryText,\n} from '../../components/ContactsList/ContactsList.styled';\nimport ContactList from 'components/ContactsList/ContactsList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <section>\n        <div>\n          <MainText>Phonebook</MainText>\n          <ContactForm />\n          <div>{isLoading && 'Request in progress...'}</div>\n          <Filter />\n          <div>\n            <SecondaryText>Contacts</SecondaryText>\n            <ContactList />\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n"],"names":["selectLoading","state","data","loading","selectAllContacts","items","UlOfContact","styled","ContactItem","Button","MainText","SecondaryText","Name","Text","dispatch","useDispatch","arrayContacts","useSelector","filterNormilized","filter","filterValue","toLowerCase","trim","visibleContacts","contact","name","includes","map","id","number","onClick","deleteContacts","type","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","Label","nameInputId","numberInputId","contacts","onSubmit","e","preventDefault","newContact","currentTarget","elements","value","some","elContact","PushNotifyError","addContacts","PushNotify","target","reset","htmlFor","TextField","label","variant","pattern","title","required","onChange","filterQuery","Contacts","isLoading","useEffect","fetchContacts"],"sourceRoot":""}